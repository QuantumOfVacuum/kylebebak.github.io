<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>dronfelipe</title>
    <description>Code, TILs, and other stuff.
</description>
    <link>http://kylebebak.github.io/posts/</link>
    <atom:link href="http://kylebebak.github.io/posts/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 27 Feb 2016 13:01:02 -0600</pubDate>
    <lastBuildDate>Sat, 27 Feb 2016 13:01:02 -0600</lastBuildDate>
    <generator>Jekyll v3.1.1</generator>
    
      <item>
        <title>Blogging like a hacker with Jekyll</title>
        <description>&lt;p&gt;Jekyll is awesome.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/cobyism/4730490&quot;&gt;https://gist.github.com/cobyism/4730490&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 25 Feb 2016 00:00:00 -0600</pubDate>
        <link>http://kylebebak.github.io/posts/code/jekyll/blogging-for-hackers</link>
        <guid isPermaLink="true">http://kylebebak.github.io/posts/code/jekyll/blogging-for-hackers</guid>
        
        
        <category>code</category>
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>Exponential navigation, and chaining Sublime Text API calls</title>
        <description>&lt;p&gt;I’ve never been much of a Vim user, but people I respect swear by it. Among its “super powers” is lightning fast navigation in normal mode. I like being able to hit &lt;kbd&gt;5&lt;/kbd&gt;,&lt;kbd&gt;j&lt;/kbd&gt; and move up 5 lines, because often one line at a time is too slow, and ~40 lines with &lt;kbd&gt;Page Up&lt;/kbd&gt; is too fast.&lt;/p&gt;

&lt;p&gt;But using Vintage Mode for this alone seemed like overkill, so I decided I would find a Sublime Text plugin that could chain multiple calls to &lt;strong&gt;“move cursor up a line”&lt;/strong&gt;, and so forth, and put these in my keymap. I stumbled upon &lt;a href=&quot;https://github.com/kylebebak/sublime_text_config/blob/master/run_multiple_commands.py&quot;&gt;this one&lt;/a&gt; in the ST forums, which does the job nicely. To enable it, simply put this file, &lt;code class=&quot;highlighter-rouge&quot;&gt;run_multiple_commands.py&lt;/code&gt;, into &lt;code class=&quot;highlighter-rouge&quot;&gt;~/Library/Application\ Support/Sublime\ Text\ 3/Packages/User&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you want to chain calls to the ST API in your &lt;strong&gt;keymap&lt;/strong&gt;, it helps to know what those calls look like. Fortunately, there’s an easy way to find out. Bring up the &lt;strong&gt;console&lt;/strong&gt; with &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;`&lt;/kbd&gt;, and enter &lt;code class=&quot;highlighter-rouge&quot;&gt;sublime.log_commands(True)&lt;/code&gt;. Now, every call you make to the API by pressing key(s) or clicking your mouse will get logged to the console, and you can copy it almost as is into your keymap. &lt;a href=&quot;https://github.com/kylebebak/sublime_text_config/blob/master/Default%20(OSX).sublime-keymap&quot;&gt;Here’s my keymap&lt;/a&gt;, and here’s an excerpt with some entries that &lt;strong&gt;run multiple commands&lt;/strong&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;keys&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;alt+up&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;run_multiple_commands&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;commands&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;move&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;by&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lines&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;forward&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;context&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;window&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;move&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;by&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lines&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;forward&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;context&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;window&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;move&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;by&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lines&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;forward&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;context&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;window&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;move&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;by&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lines&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;forward&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;context&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;window&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;move&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;by&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;lines&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;forward&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;context&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;window&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;

&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;keys&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ctrl+alt+left&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;run_multiple_commands&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;commands&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;move&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;by&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;wordends&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;forward&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;context&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;window&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;move&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;by&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;wordends&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;forward&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;context&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;window&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;command&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;move&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;by&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;wordends&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;forward&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;context&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;window&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;exponential-navigation&quot;&gt;Exponential navigation&lt;/h2&gt;
&lt;p&gt;I can hit &lt;kbd&gt;alt&lt;/kbd&gt;+&lt;kbd&gt;up/down&lt;/kbd&gt; to move 5 lines up or down, adding &lt;kbd&gt;shift&lt;/kbd&gt; to highlight these lines, and I can do the same with &lt;kbd&gt;ctrl&lt;/kbd&gt;+&lt;kbd&gt;alt&lt;/kbd&gt;+&lt;kbd&gt;left/right&lt;/kbd&gt; to move 3 words left or right.&lt;/p&gt;

&lt;p&gt;I’ve been using this system for over a year. Arriving at 5 lines for vertical movement and 3 words for lateral movement was part intuition and part trial and error. The intuition behind it was enabling navigation whose sensitivity struck a &lt;strong&gt;exponential middle ground&lt;/strong&gt; between:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;kbd&gt;up/down&lt;/kbd&gt; -&amp;gt; ? -&amp;gt; &lt;kbd&gt;Page Up/Page Down&lt;/kbd&gt;
    &lt;ul&gt;
      &lt;li&gt;1 line -&amp;gt; 5 lines -&amp;gt; ~40 lines&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;kbd&gt;alt&lt;/kbd&gt;+&lt;kbd&gt;left/right&lt;/kbd&gt; -&amp;gt; ? -&amp;gt; &lt;kbd&gt;super&lt;/kbd&gt;+&lt;kbd&gt;left/right&lt;/kbd&gt;
    &lt;ul&gt;
      &lt;li&gt;1 word -&amp;gt; 3 words -&amp;gt; ~15 words&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In practice, the system is natural and smooth. After a while, choosing which of the 3 “levels” of sensitivity is most appropriate requires almost no cognitive effort, but at the same time it doesn’t feel imprecise. If you’re moving down to something 19 lines away, you hit &lt;kbd&gt;alt&lt;/kbd&gt;+&lt;kbd&gt;down&lt;/kbd&gt; a few times, watching the cursor as you go, hit up, and you’re there. It turns out a few times was 4, &lt;strong&gt;&lt;em&gt;but you didn’t have to think about it&lt;/em&gt;&lt;/strong&gt;, because you had visual feedback the whole way.&lt;/p&gt;

&lt;p&gt;If your file is 250 lines long, 10 movements will get you to any line in the file. Typically, this will be more like 4. It’s fast and relatively mindless, which is what I want in navigation. I’d rather focus on the code.&lt;/p&gt;
</description>
        <pubDate>Wed, 24 Feb 2016 00:00:00 -0600</pubDate>
        <link>http://kylebebak.github.io/posts/code/sublime-text/exponential-navigation</link>
        <guid isPermaLink="true">http://kylebebak.github.io/posts/code/sublime-text/exponential-navigation</guid>
        
        
        <category>code</category>
        
        <category>sublime-text</category>
        
      </item>
    
      <item>
        <title>Things software doesn&#39;t eat, and software not worth eating</title>
        <description>&lt;p&gt;Hampton Creek, aka Beyond Eggs, has raised &lt;a href=&quot;https://www.crunchbase.com/organization/hampton-creek-foods#/entity&quot;&gt;$120M in the last 4 years&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Our technology, which is based upon understanding plants from every corner of the planet, enables consumers, food manufactures, and the largest retailers around the world to offer better, healthier products, at a more affordable cost.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Their biggest claim to fame is making &lt;a href=&quot;https://en.wikipedia.org/wiki/Just_Mayo&quot;&gt;mayonnaise without eggs&lt;/a&gt;, although it turns out this achievement was &lt;a href=&quot;http://techcrunch.com/2015/08/30/haveyouseenthewarningletter/&quot;&gt;outsourced&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I’d wager that the ladies at Rincón Jarocho, who serve a real tasty lunch for $3, know more about food than Hampton Creek’s CEO, notwithstanding his database of plants. Apparently he’s vegan, but $120M for split pea mayo smells fishy to me. El Rincón Jarocho and a thousand places like it are also the reason Sprig would be a tough sell in Mexico City.&lt;/p&gt;

&lt;p&gt;The point is, most industries aren’t as ripe for disruption as music and taxis, and many aren’t even as ripe as experiments in the Bay Area suggest. Software is obviously the future, but fortunately for most of us, it’s not the future of food.&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Feb 2016 00:00:00 -0600</pubDate>
        <link>http://kylebebak.github.io/posts/code/random/software-eating-the-world</link>
        <guid isPermaLink="true">http://kylebebak.github.io/posts/code/random/software-eating-the-world</guid>
        
        
        <category>code</category>
        
        <category>random</category>
        
      </item>
    
      <item>
        <title>Configuration files that deserve Github repos</title>
        <description>&lt;p&gt;Having these in version control is nice, especially for configuring a new dev machine.&lt;/p&gt;

&lt;h2 id=&quot;sublime-text-user-directory&quot;&gt;Sublime Text User directory&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;~/Library/Application\ Support/Sublime\ Text\ 3/Packages/User&lt;/code&gt;&lt;br /&gt;
The &lt;a href=&quot;https://github.com/kylebebak/sublime_text_config.git&quot;&gt;Packages/User directory&lt;/a&gt; containing all the bells and whistles I’ve added to Sublime Text.&lt;/p&gt;

&lt;h2 id=&quot;dotfiles&quot;&gt;Dotfiles&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;$HOME/dotfiles&lt;/code&gt;&lt;br /&gt;
My &lt;a href=&quot;https://github.com/kylebebak/dotfiles.git&quot;&gt;dotfiles&lt;/a&gt;, all with symlinks up to &lt;code class=&quot;highlighter-rouge&quot;&gt;$HOME&lt;/code&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Feb 2016 00:00:00 -0600</pubDate>
        <link>http://kylebebak.github.io/posts/code/github/config-in-github</link>
        <guid isPermaLink="true">http://kylebebak.github.io/posts/code/github/config-in-github</guid>
        
        
        <category>code</category>
        
        <category>github</category>
        
      </item>
    
      <item>
        <title>Eslint, the configurable next-gen (ES6, JSX) JavaScript linter</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/eslint/eslint&quot;&gt;Eslint&lt;/a&gt; is a next-gen JS linter executable that allows you to configure linting on a project by project basis. It supports ES6 and JSX syntax.&lt;/p&gt;

&lt;p&gt;Unlike most packages installed via &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt;, it makes most sense to install eslint globally: &lt;code class=&quot;highlighter-rouge&quot;&gt;npm install -g eslint&lt;/code&gt;. Running &lt;code class=&quot;highlighter-rouge&quot;&gt;eslint --init&lt;/code&gt; in a project directory will prompt you to pick a popular style guide or answer a series of questions to generate your &lt;code class=&quot;highlighter-rouge&quot;&gt;.eslintrc.*&lt;/code&gt; file (YAML, JS, or JSON).&lt;/p&gt;

&lt;p&gt;This file differentiates &lt;code class=&quot;highlighter-rouge&quot;&gt;eslint&lt;/code&gt; from other linters like &lt;code class=&quot;highlighter-rouge&quot;&gt;jshint&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;pyflakes&lt;/code&gt;: &lt;code class=&quot;highlighter-rouge&quot;&gt;eslint&lt;/code&gt; won’t even run without it. If gives you fine-grained control of what should raise an error, what should raise a warning, and what should be ignored. If there is no &lt;code class=&quot;highlighter-rouge&quot;&gt;.eslintrc.*&lt;/code&gt; file in the current directory, eslint will traverse upward and look for it in the parent directory, until it gets to your home directory. As with many &lt;a href=&quot;http://eslint.org/docs/user-guide/configuring&quot;&gt;config&lt;/a&gt; dotfiles, the default file should go here. This is mine:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;rules&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;indent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;quotes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;single&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;linebreak-style&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;unix&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;semi&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;always&quot;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;comma-dangle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;no-unused-vars&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;env&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;es6&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;browser&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;node&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;extends&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;eslint:recommended&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;ecmaFeatures&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;modules&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;jsx&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;forOf&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;experimentalObjectRestSpread&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&quot;plugins&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;By default, I can lint JS written for the browser or written for Node, with general support for ES6, and specific &lt;code class=&quot;highlighter-rouge&quot;&gt;ecmaFeatures&lt;/code&gt; such as &lt;code class=&quot;highlighter-rouge&quot;&gt;jsx&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;modules&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;forOf&lt;/code&gt; loops enabled.&lt;/p&gt;

&lt;h2 id=&quot;jsx-and-other-syntaxes&quot;&gt;JSX and other syntaxes&lt;/h2&gt;
&lt;p&gt;If you want to lint JSX, an additional npm package, &lt;code class=&quot;highlighter-rouge&quot;&gt;eslint-plugin-react&lt;/code&gt;. If you want to be sure this is in your path (for example, so that &lt;a href=&quot;../sublime-text/sublime-linter&quot;&gt;SublimeLinter&lt;/a&gt; can see it), install it globally. If you set up a new project with &lt;code class=&quot;highlighter-rouge&quot;&gt;eslint --init&lt;/code&gt; and indicate that you want to lint JSX, eslint will automatically install this plugin locally.&lt;/p&gt;

&lt;h2 id=&quot;one-linter-to-rule-them-all&quot;&gt;One linter to rule them all&lt;/h2&gt;
&lt;p&gt;Very few linters offer the customizability of eslint. Back in the day, before the profusion of frameworks, being able to configure a linter might have seemed like overkill. If you don’t like how &lt;code class=&quot;highlighter-rouge&quot;&gt;pyflakes&lt;/code&gt; does things, you just install a different linter, like &lt;code class=&quot;highlighter-rouge&quot;&gt;pep8&lt;/code&gt;. Modern JavaScript, however, is a different beast. It’s used to build nearly anything — single page web apps, servers, APIs, mobile apps, command line tools, etc — and syntax and coding conventions vary accordingly. A linter dealing with these use cases needs to be customizable, and that’s why eslint is the JS linter to rule them all.&lt;/p&gt;
</description>
        <pubDate>Mon, 22 Feb 2016 00:00:00 -0600</pubDate>
        <link>http://kylebebak.github.io/posts/code/javascript/eslint</link>
        <guid isPermaLink="true">http://kylebebak.github.io/posts/code/javascript/eslint</guid>
        
        
        <category>code</category>
        
        <category>javascript</category>
        
      </item>
    
      <item>
        <title>SublimeLinter for code linting in any language</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://github.com/SublimeLinter/SublimeLinter3&quot;&gt;SublimeLinter&lt;/a&gt; is a code linting framework for Sublime Text. Its design is straightforward and very effective, and I feel like writing about it.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;In &lt;a href=&quot;https://sublimelinter.readthedocs.org/en/latest/lint_modes.html#background&quot;&gt;background mode&lt;/a&gt;, lint requests are generated for every modification of a view, as well as on file loading and saving… Remember that background lint requests only trigger a lint if the associated view has not been modified when the request is pulled off the queue…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On each modification of a view, a lint request is enqueued. After a delay, the request gets pulled off the queue. If no other requests were added to the queue during the delay, i.e. the current request is the only request on the queue when it gets pulled off, then it triggers a lint. This debounces linting requests, like in the &lt;a href=&quot;https://github.com/jamesfzhang/auto-save&quot;&gt;auto-save&lt;/a&gt; plugin I contribute to. The lint looks at the syntax of the file, and runs all of the SublimeLinter &lt;strong&gt;linters&lt;/strong&gt; assigned to the syntax of the view. Each &lt;strong&gt;linter&lt;/strong&gt;, in turn, calls the command line executable it uses for linting (&lt;code class=&quot;highlighter-rouge&quot;&gt;eslint&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;javac -Xlint&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;pyflakes&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ruby -wc&lt;/code&gt;, …), retrieves line-specific warnings and errors, and returns them to SublimeLinter. SublimeLinter finishes up by aggregating the errors and displaying them in the gutter. Here’s a &lt;a href=&quot;https://sublimelinter.readthedocs.org/en/latest/usage.html#usage-linting&quot;&gt;detailed description&lt;/a&gt; from the excellent documentation.&lt;/p&gt;

&lt;p&gt;The SublimeLinter &lt;strong&gt;linters&lt;/strong&gt; I mentioned above are separate packages that must be installed with Package Control. SublimeLinter manages delegation details, like displaying errors and managing the queue of lint requests, but does no linting on its own. If you were paying attention above, you noticed that &lt;strong&gt;linters&lt;/strong&gt; don’t lint either; they delegate lint requests to their command line linter of choice.&lt;/p&gt;

&lt;p&gt;This modular design makes SublimeLinter easy to extend. To add linting for a new syntax, e.g. &lt;a href=&quot;../javascript/eslint&quot;&gt;ES6 JS or JSX&lt;/a&gt;, you don’t even touch SublimeLinter. You create a package that calls a linting executable and passes the results to SublimeLinter, basing your code on the many existing linting packages.&lt;/p&gt;

&lt;p&gt;SublimeLinter settings are specified in &lt;code class=&quot;highlighter-rouge&quot;&gt;~/Library/Application\ Support/Sublime\ Text\ 3/Packages/User/SublimeLinter.sublime-settings&lt;/code&gt;. Here you can change the “debounce” &lt;code class=&quot;highlighter-rouge&quot;&gt;delay&lt;/code&gt;, the &lt;code class=&quot;highlighter-rouge&quot;&gt;lint_mode&lt;/code&gt;, configure individual linters, and define a &lt;code class=&quot;highlighter-rouge&quot;&gt;syntax_map&lt;/code&gt; to make sure your linters are called for files with specialized syntax.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;user&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;delay&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;lint_mode&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;background&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;linters&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;eslint&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;@disable&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;args&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[],&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
                &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;excludes&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;syntax_map&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;html (django)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;html (rails)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;html 5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;javascript (babel)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;javascript&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;php&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;html&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
            &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;python django&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;python&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
        &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
    &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I find IDEs clunky and bloated; they’re designed for many things, but not for editing text. Text is the raw material of all programs, &lt;strong&gt;which for me is enough to make IDEs an anti-pattern&lt;/strong&gt;. Code linting, however, has always been one of their strong points. SublimeLinter gives you industrial strength code linting in a lean, mean text editor, which, if this applies to you, is one more reason to drop your IDE.&lt;/p&gt;
</description>
        <pubDate>Sun, 21 Feb 2016 00:00:00 -0600</pubDate>
        <link>http://kylebebak.github.io/posts/code/sublime-text/sublime-linter</link>
        <guid isPermaLink="true">http://kylebebak.github.io/posts/code/sublime-text/sublime-linter</guid>
        
        
        <category>code</category>
        
        <category>sublime-text</category>
        
      </item>
    
      <item>
        <title>Sublime Text packages I&#39;ve used</title>
        <description>&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Package&lt;/th&gt;
      &lt;th&gt;Description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/skuroda/Sublime-AdvancedNewFile&quot;&gt;AdvancedNewFile&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;File creation plugin.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/wbond/sublime_alignment&quot;&gt;Alignment&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Easy alignment of multiple selections and multi-line selections.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/facelessuser/ApplySyntax&quot;&gt;ApplySyntax&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;ApplySyntax is a plugin for Sublime Text 2 and 3 that allows you to detect and apply the syntax of files that might not otherwise be detected properly.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/Pleasurazy/Sublime-Better-Completion&quot;&gt;Better Completion&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Provides a simpler way to define your own auto-completions. Comes with API completions for JavaScript, jQuery, Lodash, Underscore, HTML5, CSS3 and Bootstrap Classes, React.js, etc.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/facelessuser/BracketHighlighter&quot;&gt;Bracket Highlighter&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Bracket and tag highlights appear in gutter.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/squ1b3r/Djaneiro&quot;&gt;Djaneiro&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Django snippets and completions.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/spadgos/sublime-jsdocs&quot;&gt;DocBlockr&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Makes writing Java and JS documentation a lot easier.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/sergeche/emmet-sublime&quot;&gt;Emmet&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;An incredible plugin for writing HTML and CSS.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/jbrooksuk/Sublime-Evaluate&quot;&gt;Evaluate&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Evaluate the selection with the Python interpreter.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/SublimeText-Markdown/MarkdownEditing&quot;&gt;Markdown Editing&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Powerful Markdown support with better syntax understanding and good color schemes.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/skuroda/PackageResourceViewer&quot;&gt;PackageResourceViewer&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Plugin to assist viewing and editing package resources.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/gerardroche/sublime-phpck&quot;&gt;PHP Completions&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;PHP snippets and completions.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/titoBouzout/SideBarEnhancements&quot;&gt;Side Bar&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Provides enhancements to the operations on files and folders available from the side bar.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/jamesfzhang/auto-save&quot;&gt;auto-save&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Automatically save files after every edit.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/babel/babel-sublime&quot;&gt;Babel&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Language definitions for ES6+ JavaScript with React JSX syntax extensions.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/srusskih/SublimeJEDI&quot;&gt;Jedi&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Python snippets and completions.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/SublimeLinter/SublimeLinter3&quot;&gt;SublimeLinter&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Interactive code linting framework. &lt;sup&gt;&lt;a href=&quot;#first&quot;&gt;(1)&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://github.com/facelessuser/ScopeHunter&quot;&gt;ScopeHunter&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Get the scope under the cursor.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;a name=&quot;first&quot;&gt;&lt;sup&gt;(1)&lt;/sup&gt;&lt;/a&gt; More on &lt;a href=&quot;./sublime-linter&quot;&gt;SublimeLinter&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Sat, 20 Feb 2016 00:00:00 -0600</pubDate>
        <link>http://kylebebak.github.io/posts/code/sublime-text/useful-packages</link>
        <guid isPermaLink="true">http://kylebebak.github.io/posts/code/sublime-text/useful-packages</guid>
        
        
        <category>code</category>
        
        <category>sublime-text</category>
        
      </item>
    
      <item>
        <title>Add Bash and Zsh tab completion to your shell script</title>
        <description>&lt;p&gt;Tab completion can be a big usability win for CL tools, but building it into your program isn’t straightforward, and there aren’t many how-to resources online. Luckily, I found &lt;a href=&quot;https://blog.jcoglan.com/2013/02/12/tab-completion-for-your-command-line-apps/&quot;&gt;this excellent tutorial&lt;/a&gt; written by James Coglan, and used it to build tab completion for my program &lt;a href=&quot;https://github.com/kylebebak/notes&quot;&gt;notes&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;He bases his tutorial on the tab completions offered by &lt;a href=&quot;https://github.com/rbenv/rbenv&quot;&gt;rbenv&lt;/a&gt;, the Ruby environment and package manager. Incidentally, this is similar to how &lt;strong&gt;rbenv&lt;/strong&gt;’s Python counterpart, &lt;strong&gt;virtualenv&lt;/strong&gt;, deploys tab completions.&lt;/p&gt;

&lt;p&gt;When I type in &lt;code class=&quot;highlighter-rouge&quot;&gt;notes&lt;/code&gt; at the command line and hit tab, a function is invoked that builds and displays a list of notes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/kylebebak/posts/master/_assets/img/notes_tab_completion.gif&quot; alt=&quot;notes tab completion&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The completions I wrote work for &lt;strong&gt;Bash&lt;/strong&gt; and &lt;strong&gt;Zsh&lt;/strong&gt;. When the shell starts up, a shell-specific completion function is defined, and hooked into the shell with one of the following commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Bash&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;complete&lt;/span&gt; -F &amp;lt;completion_function&amp;gt; notes
&lt;span class=&quot;c&quot;&gt;# Zsh&lt;/span&gt;
compctl -K &amp;lt;completion_function&amp;gt; notes
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;There are a few ways to make sure this happens. &lt;a href=&quot;http://www.debian-administration.org/article/317/An_introduction_to_bash_completion_part_2&quot;&gt;One&lt;/a&gt; is to put a script with the completion function and the command in a special, shell-specific directory, like &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/bash_completion.d&lt;/code&gt;. The one I prefer, used by rbenv and virtualenv, is to require the user to source the completion script himself by adding a line to his shell startup file:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# rbenv&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;eval&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt;rbenv init -&lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# virtualenv&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;source&lt;/span&gt; /usr/local/bin/virtualenvwrapper.sh
&lt;span class=&quot;c&quot;&gt;# notes&lt;/span&gt;
which notes &amp;gt;/dev/null &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; . &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt; notes -i &lt;span class=&quot;k&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I like this method because it doesn’t depend on the special completion directories, and it doesn’t deploy files to them. In the case of notes, if &lt;code class=&quot;highlighter-rouge&quot;&gt;notes -i&lt;/code&gt; is invoked, it returns the absolute path of the completion “control” script. This script decides which shell-specific completion script to invoke, depending on the shell. The user simply sources this control script in his startup file, and boom, notes gets tab completions!&lt;/p&gt;
</description>
        <pubDate>Fri, 19 Feb 2016 00:00:00 -0600</pubDate>
        <link>http://kylebebak.github.io/posts/code/shell/enabling-tab-completion</link>
        <guid isPermaLink="true">http://kylebebak.github.io/posts/code/shell/enabling-tab-completion</guid>
        
        
        <category>code</category>
        
        <category>shell</category>
        
      </item>
    
      <item>
        <title>How to distribute your program via Homebrew</title>
        <description>&lt;p&gt;I recently packaged a program I wrote called &lt;a href=&quot;https://github.com/kylebebak/notes&quot;&gt;notes&lt;/a&gt; for distribution via &lt;code class=&quot;highlighter-rouge&quot;&gt;Homebrew&lt;/code&gt;, following this &lt;a href=&quot;http://formalfriday.club/2015/01/05/creating-your-own-homebrew-tap-and-formula.html&quot;&gt;excellent tutorial&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;To make your package installable via Homebrew, you put it in a Github repo and create a release. Then you create a &lt;strong&gt;tap&lt;/strong&gt;, a repo containing at least one &lt;strong&gt;formula&lt;/strong&gt;. The formula is a Ruby file pointing to a downloadable tarball of the package, with instructions on how to build and install it.&lt;/p&gt;

&lt;p&gt;When a user downloads your package, the tarball is saved to &lt;code class=&quot;highlighter-rouge&quot;&gt;/Library/Caches/Homebrew&lt;/code&gt;. It gets unzipped and, depending on the formula, parts of the package are copied to &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/Cellar/&amp;lt;pkg&amp;gt;/&amp;lt;version&amp;gt;&lt;/code&gt;. This directory, in the user’s &lt;strong&gt;cellar&lt;/strong&gt;, is called a &lt;strong&gt;keg&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;To make writing formulae easier, you can use &lt;a href=&quot;https://github.com/Homebrew/homebrew/blob/master/share/doc/homebrew/Formula-Cookbook.md#variables-for-directory-locations&quot;&gt;variables for directory locations&lt;/a&gt;. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;bin.install foo&lt;/code&gt; will create &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/Cellar/&amp;lt;pkg&amp;gt;/&amp;lt;version&amp;gt;/bin/foo&lt;/code&gt;, use &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod&lt;/code&gt; to make sure foo is executable, and create a symlink from &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin/foo&lt;/code&gt; to foo in the cellar.&lt;/p&gt;

&lt;p&gt;They say &lt;a href=&quot;https://news.ycombinator.com/item?id=7811482&quot;&gt;the right example is worth 1000 lines of documentation&lt;/a&gt;. Enough beating around the bush — here is notes’ directory tree, courtesy of &lt;a href=&quot;https://en.wikipedia.org/wiki/Tree_(Unix)&quot;&gt;tree&lt;/a&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;.
├── LICENSE
├── README.md
├── _completions
│   ├── c.bash
│   ├── c.zsh
│   └── init.sh
├── _config
│   └── env.sh
├── _helpers
│   └── helpers.sh
└── bin
    └── notes
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And here’s the formula for installing notes, i.e. building the notes keg:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Notes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Formula&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;...&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;homepage&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/kylebebak/notes&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://github.com/kylebebak/notes/archive/1.0.0.tarball.gz&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;1.0.0&quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sha256&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;e17405adc655824dec3ca6e2a9a4b199a715743ed5f0948df58f6bb369267aa3&quot;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;bin/notes&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;_completions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;_helpers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Dir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;_config&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This &lt;code class=&quot;highlighter-rouge&quot;&gt;install&lt;/code&gt; method creates a keg with the same directory tree as the one in source code, while ignoring metadata like &lt;code class=&quot;highlighter-rouge&quot;&gt;README.md&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;LICENSE&lt;/code&gt;, and tests or CI scripts, if I had any. The &lt;code class=&quot;highlighter-rouge&quot;&gt;prefix.install&lt;/code&gt; method copies the directories into the cellar without polluting the executable namespace under &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin&lt;/code&gt;. The only symlink created by this formula is &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/local/bin/notes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once you have your tarball release and your tap on Github, users can install your program with two shell commands:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;brew tap kylebebak/notes
brew install notes
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Tab completion is crucial to &lt;strong&gt;notes&lt;/strong&gt;’ usability. Enabling it was the trickiest part of writing notes; I explain how in &lt;a href=&quot;../shell/enabling-tab-completion&quot;&gt;this post&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Fri, 19 Feb 2016 00:00:00 -0600</pubDate>
        <link>http://kylebebak.github.io/posts/code/homebrew/distribute-program-via-homebrew</link>
        <guid isPermaLink="true">http://kylebebak.github.io/posts/code/homebrew/distribute-program-via-homebrew</guid>
        
        
        <category>code</category>
        
        <category>homebrew</category>
        
      </item>
    
      <item>
        <title>Live HTML and Markdown preview in Sublime Text with auto-save</title>
        <description>&lt;p&gt;I found &lt;a href=&quot;https://github.com/jamesfzhang/auto-save&quot;&gt;auto-save&lt;/a&gt; when I decided I was going to write my resume in HTML and &lt;a href=&quot;../random/ms-word-is-terrible&quot;&gt;never use MS Word again&lt;/a&gt;. Hopefully.&lt;/p&gt;

&lt;p&gt;Props to &lt;a href=&quot;https://github.com/jamesfzhang&quot;&gt;James Zhang&lt;/a&gt; for writing this plugin. When you enable it, it automatically saves the currently open file after each edit. Calls to &lt;code class=&quot;highlighter-rouge&quot;&gt;save&lt;/code&gt; are &lt;a href=&quot;https://css-tricks.com/the-difference-between-throttling-and-debouncing/&quot;&gt;debounced&lt;/a&gt; by 1 second to avoid overworking the Sublime Text API.&lt;/p&gt;

&lt;p&gt;One annoying side effect of saving is that it closes the &lt;strong&gt;autocomplete&lt;/strong&gt; window if it’s open. Since you only have a second between when you stop typing and &lt;code class=&quot;highlighter-rouge&quot;&gt;save&lt;/code&gt; is called, it renders autocomplete sort of useless. So I added an option to the plugin that avoids calling &lt;code class=&quot;highlighter-rouge&quot;&gt;save&lt;/code&gt;. Instead, it grabs the text in the open file and writes it to another file in the same directory, with &lt;code class=&quot;highlighter-rouge&quot;&gt;.autosave&lt;/code&gt; appended before the file extension.&lt;/p&gt;

&lt;p&gt;For editing HTML, here’s the workflow I use:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Install &lt;code class=&quot;highlighter-rouge&quot;&gt;auto-save&lt;/code&gt; via Package Control.&lt;/li&gt;
  &lt;li&gt;Open &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;file&amp;gt;.html&lt;/code&gt; in ST, and from the Command Palette run &lt;code class=&quot;highlighter-rouge&quot;&gt;Toggle AutoSave Backup: current file only&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Install &lt;a href=&quot;https://www.npmjs.com/package/gulp-server-livereload#command-line&quot;&gt;gulp-server-livereload&lt;/a&gt; or something similar via &lt;code class=&quot;highlighter-rouge&quot;&gt;npm&lt;/code&gt;, and have it watch your current directory.&lt;/li&gt;
  &lt;li&gt;Fire up your browser and head to wherever &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp-server-livereload&lt;/code&gt; is serving your files. Open &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;file&amp;gt;.autosave.html&lt;/code&gt;, in the browser, go back to ST and edit away.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You’re editing HTML and seeing how it looks in your browser, with style sheets and all, &lt;strong&gt;in real time&lt;/strong&gt;. Magic! Having two monitors, one for ST and one for your browser, makes this even sweeter.&lt;/p&gt;

&lt;p&gt;To get a live preview of Markdown, there are a few extra steps:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Install &lt;code class=&quot;highlighter-rouge&quot;&gt;MarkdownEditing&lt;/code&gt;, or something similar, via Package Control.&lt;/li&gt;
  &lt;li&gt;Install &lt;a href=&quot;https://www.npmjs.com/package/markdown-html&quot;&gt;markdown-html&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Use it in &lt;code class=&quot;highlighter-rouge&quot;&gt;watch&lt;/code&gt; mode: &lt;code class=&quot;highlighter-rouge&quot;&gt;markdown-html -w &amp;lt;file&amp;gt;.autosave.md -o &amp;lt;file&amp;gt;.html&lt;/code&gt;. As you edit &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;file&amp;gt;.md&lt;/code&gt;, &lt;strong&gt;auto-save&lt;/strong&gt; continually writes it to &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;file&amp;gt;.autosave.md&lt;/code&gt;, and &lt;strong&gt;markdown-html&lt;/strong&gt; continually compiles this to &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;file&amp;gt;.html&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Fire up your browser and head to wherever &lt;code class=&quot;highlighter-rouge&quot;&gt;gulp-server-livereload&lt;/code&gt; is serving your files. Open &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;file&amp;gt;.html&lt;/code&gt;, go back to ST and edit away.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;markdown-html&lt;/code&gt; is a beauty. The documentation is an ode to simplicity, and the plugin even supports injecting custom CSS and JS into the HTML output. Although it’s harder to set up, this workflow is superior to using a Markdown editor like Byword or Macdown. You get to edit text with a real text editor, and your “preview” is anything but — it’s literally the browser’s rendering of the document!&lt;/p&gt;

&lt;p&gt;Setup aside, for serious editing of static HTML docs this is a no-brainer, and I think that’s true for Markdown as well. Let me know what you think…&lt;/p&gt;
</description>
        <pubDate>Thu, 18 Feb 2016 00:00:00 -0600</pubDate>
        <link>http://kylebebak.github.io/posts/code/sublime-text/auto-save</link>
        <guid isPermaLink="true">http://kylebebak.github.io/posts/code/sublime-text/auto-save</guid>
        
        
        <category>code</category>
        
        <category>sublime-text</category>
        
      </item>
    
  </channel>
</rss>
